// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Telegram_bot;

#nullable disable

namespace Telegram_bot.Migrations
{
    [DbContext(typeof(VisitCenterContext))]
    partial class VisitCenterContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.HasSequence("catering_mode_operation_catering_id_catering_mode_operation_cat");

            modelBuilder.HasSequence("catering_type_kitchen_id_catering_type_kitchen_seq");

            modelBuilder.HasSequence("event_id_event_seq");

            modelBuilder.HasSequence("feedback_id_feedback_seq");

            modelBuilder.HasSequence("mode_operation_catering_id_mode_operation_catering_seq");

            modelBuilder.HasSequence("operating_mode_id_operating_mode_seq");

            modelBuilder.HasSequence("photo_sight_id_photo_sight_seq");

            modelBuilder.HasSequence("route_catering_hotel_id_route_catering_hotel_seq");

            modelBuilder.HasSequence("route_event_sight_id_route_event_sight_seq");

            modelBuilder.HasSequence("route_id_route_seq");

            modelBuilder.HasSequence("sight_id_sight_seq");

            modelBuilder.HasSequence("sight_operating_mode_id_sight_operating_mode_seq");

            modelBuilder.HasSequence("souvenir_id_souvenir_seq");

            modelBuilder.HasSequence("special_day_catering_id_special_day_catering_seq");

            modelBuilder.HasSequence("special_day_sight_id_special_day_sight_seq");

            modelBuilder.HasSequence("ticket_id_ticket_seq");

            modelBuilder.HasSequence("type_kitchen_id_type_kitchen_seq");

            modelBuilder.Entity("Telegram_bot.Catering", b =>
                {
                    b.Property<int>("IdCatering")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_catering");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdCatering"));

                    b.Property<string>("CateringUrl")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("catering_url");

                    b.Property<string>("EstablishmentCategory")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("establishment_category");

                    b.Property<string>("EstablishmentHouse")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("establishment_house");

                    b.Property<string>("EstablishmentName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("establishment_name");

                    b.Property<string>("EstablishmentPhone")
                        .HasMaxLength(11)
                        .HasColumnType("character(11)")
                        .HasColumnName("establishment_phone")
                        .IsFixedLength();

                    b.Property<string>("EstablishmentStreet")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("establishment_street");

                    b.HasKey("IdCatering")
                        .HasName("catering_pkey");

                    b.ToTable("catering", (string)null);
                });

            modelBuilder.Entity("Telegram_bot.CateringModeOperationCatering", b =>
                {
                    b.Property<int>("IdCateringModeOperationCatering")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_catering_mode_operation_catering")
                        .HasDefaultValueSql("nextval('catering_mode_operation_catering_id_catering_mode_operation_cat'::regclass)");

                    b.Property<int>("IdCatering")
                        .HasColumnType("integer")
                        .HasColumnName("id_catering");

                    b.Property<int>("IdModeOperationCatering")
                        .HasColumnType("integer")
                        .HasColumnName("id_mode_operation_catering");

                    b.HasKey("IdCateringModeOperationCatering")
                        .HasName("catering_mode_operation_catering_pkey");

                    b.HasIndex("IdCatering");

                    b.HasIndex("IdModeOperationCatering");

                    b.ToTable("catering_mode_operation_catering", (string)null);
                });

            modelBuilder.Entity("Telegram_bot.CateringTypeKitchen", b =>
                {
                    b.Property<int>("IdCateringTypeKitchen")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_catering_type_kitchen");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdCateringTypeKitchen"));

                    b.Property<int>("IdCatering")
                        .HasColumnType("integer")
                        .HasColumnName("id_catering");

                    b.Property<int>("IdTypeKitchen")
                        .HasColumnType("integer")
                        .HasColumnName("id_type_kitchen");

                    b.HasKey("IdCateringTypeKitchen")
                        .HasName("catering_type_kitchen_pkey");

                    b.HasIndex("IdCatering");

                    b.HasIndex("IdTypeKitchen");

                    b.ToTable("catering_type_kitchen", (string)null);
                });

            modelBuilder.Entity("Telegram_bot.Event", b =>
                {
                    b.Property<int>("IdEvent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_event")
                        .HasDefaultValueSql("nextval('event_id_event_seq'::regclass)");

                    b.Property<string>("AgeLimit")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("age_limit");

                    b.Property<DateOnly?>("DateEvent")
                        .HasColumnType("date")
                        .HasColumnName("date_event");

                    b.Property<string>("HouseEvent")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("house_event");

                    b.Property<string>("NameEvent")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("character varying(70)")
                        .HasColumnName("name_event");

                    b.Property<string>("StreetEvent")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("street_event");

                    b.Property<TimeOnly?>("TimeBeginningEvent")
                        .HasColumnType("time without time zone")
                        .HasColumnName("time_beginning_event");

                    b.Property<string>("TypeEvent")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("type_event");

                    b.HasKey("IdEvent")
                        .HasName("event__pkey");

                    b.ToTable("event_", (string)null);
                });

            modelBuilder.Entity("Telegram_bot.Feedback", b =>
                {
                    b.Property<int>("IdFeedback")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_feedback");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdFeedback"));

                    b.Property<string>("ContactCommunicationNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("character(11)")
                        .HasColumnName("contact_communication_number")
                        .IsFixedLength();

                    b.Property<int>("IdUser")
                        .HasColumnType("integer")
                        .HasColumnName("id_user");

                    b.Property<string>("MessageSubject")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("message_subject");

                    b.Property<string>("TextMessage")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("text_message");

                    b.HasKey("IdFeedback")
                        .HasName("feedback_pkey");

                    b.HasIndex("IdUser");

                    b.ToTable("feedback", (string)null);
                });

            modelBuilder.Entity("Telegram_bot.Hotel", b =>
                {
                    b.Property<int>("IdHotel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_hotel");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdHotel"));

                    b.Property<string>("ContactNumberHotel")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("character(11)")
                        .HasColumnName("contact_number_hotel")
                        .IsFixedLength();

                    b.Property<string>("HotelHouse")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("hotel_house");

                    b.Property<string>("HotelName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("hotel_name");

                    b.Property<string>("HotelStreet")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("hotel_street");

                    b.Property<string>("HotelUrl")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("hotel_url");

                    b.HasKey("IdHotel")
                        .HasName("hotel_pkey");

                    b.ToTable("hotel", (string)null);
                });

            modelBuilder.Entity("Telegram_bot.ModeOperationCatering", b =>
                {
                    b.Property<int>("IdModeOperationCatering")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_mode_operation_catering");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdModeOperationCatering"));

                    b.Property<TimeOnly>("Beginning")
                        .HasColumnType("time without time zone")
                        .HasColumnName("beginning");

                    b.Property<TimeOnly>("EndDay")
                        .HasColumnType("time without time zone")
                        .HasColumnName("end_day");

                    b.Property<string>("WorkingDayWeek")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)")
                        .HasColumnName("working_day_week");

                    b.HasKey("IdModeOperationCatering")
                        .HasName("mode_operation_catering_pkey");

                    b.ToTable("mode_operation_catering", (string)null);
                });

            modelBuilder.Entity("Telegram_bot.OperatingMode", b =>
                {
                    b.Property<int>("IdOperatingMode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_operating_mode");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdOperatingMode"));

                    b.Property<string>("DayOfWeek")
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)")
                        .HasColumnName("day_of_week");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time without time zone")
                        .HasColumnName("end_time");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time without time zone")
                        .HasColumnName("start_time");

                    b.HasKey("IdOperatingMode")
                        .HasName("operating_mode_pkey");

                    b.ToTable("operating_mode", (string)null);
                });

            modelBuilder.Entity("Telegram_bot.PhotoSight", b =>
                {
                    b.Property<int>("IdPhotoSight")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_photo_sight");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdPhotoSight"));

                    b.Property<int>("IdSight")
                        .HasColumnType("integer")
                        .HasColumnName("id_sight");

                    b.Property<string>("LinkPhoto")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("link_photo");

                    b.Property<string>("ShortDescription")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("short_description");

                    b.HasKey("IdPhotoSight")
                        .HasName("photo_sight_pkey");

                    b.HasIndex("IdSight");

                    b.ToTable("photo_sight", (string)null);
                });

            modelBuilder.Entity("Telegram_bot.Route", b =>
                {
                    b.Property<int>("IdRoute")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_route");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdRoute"));

                    b.Property<DateOnly>("DateCreation")
                        .HasColumnType("date")
                        .HasColumnName("date_creation");

                    b.Property<int>("IdUser")
                        .HasColumnType("integer")
                        .HasColumnName("id_user");

                    b.Property<string>("NameRoute")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name_route");

                    b.HasKey("IdRoute")
                        .HasName("route_pkey");

                    b.HasIndex("IdUser");

                    b.ToTable("route", (string)null);
                });

            modelBuilder.Entity("Telegram_bot.RouteCateringHotel", b =>
                {
                    b.Property<int>("IdRouteCateringHotel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_route_catering_hotel");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdRouteCateringHotel"));

                    b.Property<int?>("IdCatering")
                        .HasColumnType("integer")
                        .HasColumnName("id_catering");

                    b.Property<int?>("IdHotel")
                        .HasColumnType("integer")
                        .HasColumnName("id_hotel");

                    b.Property<int>("IdRoute")
                        .HasColumnType("integer")
                        .HasColumnName("id_route");

                    b.HasKey("IdRouteCateringHotel")
                        .HasName("route_catering_hotel_pkey");

                    b.HasIndex("IdCatering");

                    b.HasIndex("IdHotel");

                    b.HasIndex("IdRoute");

                    b.ToTable("route_catering_hotel", (string)null);
                });

            modelBuilder.Entity("Telegram_bot.RouteEventSight", b =>
                {
                    b.Property<int>("IdRouteEventSight")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_route_event_sight");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdRouteEventSight"));

                    b.Property<int?>("IdEvent")
                        .HasColumnType("integer")
                        .HasColumnName("id_event");

                    b.Property<int>("IdRoute")
                        .HasColumnType("integer")
                        .HasColumnName("id_route");

                    b.Property<int?>("IdSight")
                        .HasColumnType("integer")
                        .HasColumnName("id_sight");

                    b.HasKey("IdRouteEventSight")
                        .HasName("route_event_sight_pkey");

                    b.HasIndex("IdEvent");

                    b.HasIndex("IdRoute");

                    b.HasIndex("IdSight");

                    b.ToTable("route_event_sight", (string)null);
                });

            modelBuilder.Entity("Telegram_bot.Sight", b =>
                {
                    b.Property<int>("IdSight")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_sight");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdSight"));

                    b.Property<string>("ContactNumber")
                        .HasMaxLength(11)
                        .HasColumnType("character(11)")
                        .HasColumnName("contact_number")
                        .IsFixedLength();

                    b.Property<string>("Description")
                        .HasMaxLength(900)
                        .HasColumnType("character varying(900)")
                        .HasColumnName("description");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("email");

                    b.Property<string>("LocationHouse")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("location_house");

                    b.Property<string>("LocationStreet")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("location_street");

                    b.Property<string>("NameSight")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("character varying(70)")
                        .HasColumnName("name_sight");

                    b.Property<int?>("NumberSeats")
                        .HasColumnType("integer")
                        .HasColumnName("number_seats");

                    b.Property<string>("SightUrl")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("sight_url");

                    b.Property<string>("TypeSight")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("type_sight");

                    b.HasKey("IdSight")
                        .HasName("sight_pkey");

                    b.ToTable("sight", (string)null);
                });

            modelBuilder.Entity("Telegram_bot.SightOperatingMode", b =>
                {
                    b.Property<int>("IdSightOperatingMode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_sight_operating_mode");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdSightOperatingMode"));

                    b.Property<int>("IdOperatingMode")
                        .HasColumnType("integer")
                        .HasColumnName("id_operating_mode");

                    b.Property<int>("IdSight")
                        .HasColumnType("integer")
                        .HasColumnName("id_sight");

                    b.HasKey("IdSightOperatingMode")
                        .HasName("sight_operating_mode_pkey");

                    b.HasIndex("IdOperatingMode");

                    b.HasIndex("IdSight");

                    b.ToTable("sight_operating_mode", (string)null);
                });

            modelBuilder.Entity("Telegram_bot.Souvenir", b =>
                {
                    b.Property<int>("IdSouvenir")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_souvenir");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdSouvenir"));

                    b.Property<string>("NameSouvenir")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name_souvenir");

                    b.Property<string>("Product")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("product");

                    b.Property<string>("Tastes")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("tastes");

                    b.Property<string>("Weight")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("weight");

                    b.HasKey("IdSouvenir")
                        .HasName("souvenir_pkey");

                    b.ToTable("souvenir", (string)null);
                });

            modelBuilder.Entity("Telegram_bot.SpecialDayCatering", b =>
                {
                    b.Property<int>("IdSpecialDayCatering")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_special_day_catering");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdSpecialDayCatering"));

                    b.Property<int?>("Date")
                        .HasColumnType("integer")
                        .HasColumnName("date");

                    b.Property<string>("StatusDay")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("status_day");

                    b.Property<TimeOnly?>("TimeEndWork")
                        .HasColumnType("time without time zone")
                        .HasColumnName("time_end_work");

                    b.Property<TimeOnly?>("TimeStartWork")
                        .HasColumnType("time without time zone")
                        .HasColumnName("time_start_work");

                    b.HasKey("IdSpecialDayCatering")
                        .HasName("special_day_catering_pkey");

                    b.ToTable("special_day_catering", (string)null);
                });

            modelBuilder.Entity("Telegram_bot.SpecialDaySight", b =>
                {
                    b.Property<int>("IdSpecialDaySight")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_special_day_sight");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdSpecialDaySight"));

                    b.Property<TimeOnly?>("EndWork")
                        .HasColumnType("time without time zone")
                        .HasColumnName("end_work");

                    b.Property<int?>("SpecialDayDate")
                        .HasColumnType("integer")
                        .HasColumnName("special_day_date");

                    b.Property<string>("SpecialDayStatus")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("special_day_status");

                    b.Property<TimeOnly?>("StartWork")
                        .HasColumnType("time without time zone")
                        .HasColumnName("start_work");

                    b.HasKey("IdSpecialDaySight")
                        .HasName("special_day_sight_pkey");

                    b.ToTable("special_day_sight", (string)null);
                });

            modelBuilder.Entity("Telegram_bot.Ticket", b =>
                {
                    b.Property<int>("IdTicket")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_ticket");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdTicket"));

                    b.Property<int>("IdEvent")
                        .HasColumnType("integer")
                        .HasColumnName("id_event");

                    b.Property<int?>("MaximumAge")
                        .HasColumnType("integer")
                        .HasColumnName("maximum_age");

                    b.Property<int?>("MinimumAge")
                        .HasColumnType("integer")
                        .HasColumnName("minimum_age");

                    b.Property<decimal?>("Price")
                        .HasColumnType("money")
                        .HasColumnName("price");

                    b.HasKey("IdTicket")
                        .HasName("ticket_pkey");

                    b.HasIndex("IdEvent");

                    b.ToTable("ticket", (string)null);
                });

            modelBuilder.Entity("Telegram_bot.TypeKitchen", b =>
                {
                    b.Property<int>("IdTypeKitchen")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_type_kitchen");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdTypeKitchen"));

                    b.Property<string>("NameTypeKitchen")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name_type_kitchen");

                    b.HasKey("IdTypeKitchen")
                        .HasName("type_kitchen_pkey");

                    b.HasIndex(new[] { "NameTypeKitchen" }, "type_kitchen_name_type_kitchen_key")
                        .IsUnique();

                    b.ToTable("type_kitchen", (string)null);
                });

            modelBuilder.Entity("Telegram_bot.Userbot", b =>
                {
                    b.Property<int>("IdUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_user");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdUser"));

                    b.Property<DateOnly?>("DateBirth")
                        .HasColumnType("date")
                        .HasColumnName("date_birth");

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("gender");

                    b.Property<string>("LastName")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("last_name");

                    b.Property<string>("NamePerson")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("name_person");

                    b.Property<string>("Patronymic")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("patronymic");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(11)
                        .HasColumnType("character(11)")
                        .HasColumnName("phone_number")
                        .IsFixedLength();

                    b.Property<string>("UserName")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("user_name");

                    b.HasKey("IdUser")
                        .HasName("userbot_pkey");

                    b.ToTable("userbot", (string)null);
                });

            modelBuilder.Entity("Telegram_bot.CateringModeOperationCatering", b =>
                {
                    b.HasOne("Telegram_bot.Catering", "IdCateringNavigation")
                        .WithMany("CateringModeOperationCaterings")
                        .HasForeignKey("IdCatering")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_catering_mode_operation_catering");

                    b.HasOne("Telegram_bot.ModeOperationCatering", "IdModeOperationCateringNavigation")
                        .WithMany("CateringModeOperationCaterings")
                        .HasForeignKey("IdModeOperationCatering")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_catering_mode_operation_mode");

                    b.Navigation("IdCateringNavigation");

                    b.Navigation("IdModeOperationCateringNavigation");
                });

            modelBuilder.Entity("Telegram_bot.CateringTypeKitchen", b =>
                {
                    b.HasOne("Telegram_bot.Catering", "IdCateringNavigation")
                        .WithMany("CateringTypeKitchens")
                        .HasForeignKey("IdCatering")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_catering_type_kitchen_catering");

                    b.HasOne("Telegram_bot.TypeKitchen", "IdTypeKitchenNavigation")
                        .WithMany("CateringTypeKitchens")
                        .HasForeignKey("IdTypeKitchen")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_catering_type_kitchen_type");

                    b.Navigation("IdCateringNavigation");

                    b.Navigation("IdTypeKitchenNavigation");
                });

            modelBuilder.Entity("Telegram_bot.Feedback", b =>
                {
                    b.HasOne("Telegram_bot.Userbot", "IdUserNavigation")
                        .WithMany("Feedbacks")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_feedback_user");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("Telegram_bot.PhotoSight", b =>
                {
                    b.HasOne("Telegram_bot.Sight", "IdSightNavigation")
                        .WithMany("PhotoSights")
                        .HasForeignKey("IdSight")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_photo_sight_sight");

                    b.Navigation("IdSightNavigation");
                });

            modelBuilder.Entity("Telegram_bot.Route", b =>
                {
                    b.HasOne("Telegram_bot.Userbot", "IdUserNavigation")
                        .WithMany("Routes")
                        .HasForeignKey("IdUser")
                        .IsRequired()
                        .HasConstraintName("fk_route_userbot");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("Telegram_bot.RouteCateringHotel", b =>
                {
                    b.HasOne("Telegram_bot.Catering", "IdCateringNavigation")
                        .WithMany("RouteCateringHotels")
                        .HasForeignKey("IdCatering")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_route_catering_hotel_catering");

                    b.HasOne("Telegram_bot.Hotel", "IdHotelNavigation")
                        .WithMany("RouteCateringHotels")
                        .HasForeignKey("IdHotel")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_route_catering_hotel_hotel");

                    b.HasOne("Telegram_bot.Route", "IdRouteNavigation")
                        .WithMany("RouteCateringHotels")
                        .HasForeignKey("IdRoute")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_route_catering_hotel_route");

                    b.Navigation("IdCateringNavigation");

                    b.Navigation("IdHotelNavigation");

                    b.Navigation("IdRouteNavigation");
                });

            modelBuilder.Entity("Telegram_bot.RouteEventSight", b =>
                {
                    b.HasOne("Telegram_bot.Event", "IdEventNavigation")
                        .WithMany("RouteEventSights")
                        .HasForeignKey("IdEvent")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_route_event_sight_event");

                    b.HasOne("Telegram_bot.Route", "IdRouteNavigation")
                        .WithMany("RouteEventSights")
                        .HasForeignKey("IdRoute")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_route_event_sight_route");

                    b.HasOne("Telegram_bot.Sight", "IdSightNavigation")
                        .WithMany("RouteEventSights")
                        .HasForeignKey("IdSight")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_route_event_sight_sight");

                    b.Navigation("IdEventNavigation");

                    b.Navigation("IdRouteNavigation");

                    b.Navigation("IdSightNavigation");
                });

            modelBuilder.Entity("Telegram_bot.SightOperatingMode", b =>
                {
                    b.HasOne("Telegram_bot.OperatingMode", "IdOperatingModeNavigation")
                        .WithMany("SightOperatingModes")
                        .HasForeignKey("IdOperatingMode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_sight_operating_mode_operating");

                    b.HasOne("Telegram_bot.Sight", "IdSightNavigation")
                        .WithMany("SightOperatingModes")
                        .HasForeignKey("IdSight")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_sight_operating_mode_sight");

                    b.Navigation("IdOperatingModeNavigation");

                    b.Navigation("IdSightNavigation");
                });

            modelBuilder.Entity("Telegram_bot.Ticket", b =>
                {
                    b.HasOne("Telegram_bot.Event", "IdEventNavigation")
                        .WithMany("Tickets")
                        .HasForeignKey("IdEvent")
                        .IsRequired()
                        .HasConstraintName("fk_ticket_event");

                    b.Navigation("IdEventNavigation");
                });

            modelBuilder.Entity("Telegram_bot.Catering", b =>
                {
                    b.Navigation("CateringModeOperationCaterings");

                    b.Navigation("CateringTypeKitchens");

                    b.Navigation("RouteCateringHotels");
                });

            modelBuilder.Entity("Telegram_bot.Event", b =>
                {
                    b.Navigation("RouteEventSights");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("Telegram_bot.Hotel", b =>
                {
                    b.Navigation("RouteCateringHotels");
                });

            modelBuilder.Entity("Telegram_bot.ModeOperationCatering", b =>
                {
                    b.Navigation("CateringModeOperationCaterings");
                });

            modelBuilder.Entity("Telegram_bot.OperatingMode", b =>
                {
                    b.Navigation("SightOperatingModes");
                });

            modelBuilder.Entity("Telegram_bot.Route", b =>
                {
                    b.Navigation("RouteCateringHotels");

                    b.Navigation("RouteEventSights");
                });

            modelBuilder.Entity("Telegram_bot.Sight", b =>
                {
                    b.Navigation("PhotoSights");

                    b.Navigation("RouteEventSights");

                    b.Navigation("SightOperatingModes");
                });

            modelBuilder.Entity("Telegram_bot.TypeKitchen", b =>
                {
                    b.Navigation("CateringTypeKitchens");
                });

            modelBuilder.Entity("Telegram_bot.Userbot", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("Routes");
                });
#pragma warning restore 612, 618
        }
    }
}
